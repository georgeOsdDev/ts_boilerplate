version: 2.1
orbs:
  # https://circleci.com/orbs/registry/orb/circleci/aws-s3
  # S3へのアーカイブ用のorb
  # Project Setting > Environment Variablesで
  # AWS_ACCESS_KEY_ID、AWS_SECRET_ACCESS_KEY、AWS_REGIONの登録が必要
  # 上記のキーのAWSユーザーはIAMで専用ユーザーを作成済み
  # また専用ユーザーにS3アクセスできるポリシーをアタッチ済み
  aws-s3: circleci/aws-s3@1.0.4
commands:
  add_bb_user_key:
    description: "Setup Bitbucket user key"
    steps:
      # jenkins_mobilus user key ([製品開発1(押田)]mba-media-stream-capture@circle-ci)
      - add_ssh_keys:
          fingerprints:
            - "15:a1:03:25:b9:61:b2:e6:3c:f4:88:95:11:ca:f4:50"
  do_test:
    description: "Run test via yarn run test"
    steps:
      - add_bb_user_key
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            - v1-dependencies-
      - run:
          name: start karma
          # commitログに"skip test"が含まれていたらテストしない
          command: |
            commitMassage=`git log -n 1 --oneline --pretty=format:"%s"`
            if [ "$(echo $commitMassage | grep -e 'skip test')" ]; then
              echo "skip test"
            else
              yarn run test:ci
            fi
      # テスト結果はCircleCI上でJOBの詳細から確認できる
      # プランをアップグレードするとINSIGHTSが使えるっぽい
      # codecovについて
      # - https://mobi-work.slack.com/archives/CHEE4CMTJ/p1562306192027200
      # Orbは以下のエラーで使えない
      # Orb codecov/codecov@1.0.5 not loaded. To use this orb, an organization admin must opt-in to using third party orbs in Organization Security settings.
      - run:
          name: codecov
          command: |
            curl -s https://codecov.io/bash | bash -s -- \
            -Z || echo 'Codecov upload failed'
      - store_test_results:
          path: reports/junit/js-test-results.xml

jobs:
  # node_modulesのインストール
  # package.jsonが変わらない限りキャッシュを使う
  # キャッシュされたものは他のjobでも参照する
  install:
    # 実行環境 puppeteerインストールがあるのでブラウザありにしておく
    docker:
      - image: circleci/node:lts-browsers
    steps:
      - add_bb_user_key
      # コード最新化
      - checkout
      # キャッシュあれば使う
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      # 実行する処理
      - run: yarn
      # node_modulesをキャッシュ
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
  # テスト
  test:
    docker:
      - image: circleci/node:lts-browsers
    steps:
      - do_test
  # リリース用のビルド
  build:
    docker:
      - image: circleci/node:lts
    steps:
      - add_bb_user_key
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            - v1-dependencies-
      - run: bash build_circleci.sh
      # uploadのJOBに渡すためにpersistする
      - run: mkdir -p /tmp/workspace
      - run: cp -R artifact /tmp/workspace/
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - artifact
  upload:
    docker:
      # aws cliを使うためのイメージ
      - image: 'circleci/python:2.7'
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - aws-s3/sync:
          from: /tmp/workspace/artifact
          to: 's3://mbwac-build-artifacts/mba-media-stream-capture/'
  publish:
    # CDN用S3への公開
    docker:
      # aws cliを使うためのイメージ
      - image: 'circleci/python:2.7'
    steps:
      - attach_workspace:
          at: /tmp/workspace
      # MBA-4068 assetsファイルは開発環境CDN用S3にコピーする
      - run: unzip /tmp/workspace/artifact/develop/latest/mba-media-stream-capture.zip -d /tmp/workspace/artifact/develop/latest/
      - aws-s3/sync:
          from: /tmp/workspace/artifact/develop/latest/mba-media-stream-capture/public/assets
          to: s3://${AWS_S3_ASSETS_BUCKET_NAME}/assets/
          arguments: |
            --cache-control "max-age=0,s-maxage=86400"
      # cfのinvalidationはとりあえずJSのみ
      - run: aws cloudfront create-invalidation --distribution-id "${AWS_CF_DISTRIBUTION_ID}" --path  "/assets/script/agent/mba-media-stream-capture.bundle.min.js*"

# コミットが発生すると以下のworkflowsが実行される
workflows:
  version: 2
  all_in_one:
    jobs:
      - install
      - test:
          requires:
            - install
      - build:
          requires:
            - test
          filters:
            # featureブランチなどはビルド不要
            branches:
              only:
                - master
                - stage
                - develop
                - patch*
      - upload:
          requires:
            - build
          filters:
            branches:
              only:
                - master
                - stage
                - develop
                - patch*
      - publish:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
